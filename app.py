import streamlit as st
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
import joblib
import os

# Configuration de la page
st.set_page_config(
    page_title="D√©tecteur de Fake News",
    page_icon="üì∞"
)

# Titre de l'application
st.title("D√©tecteur de Fake News üì∞")

# Exemples de textes pour l'entra√Ænement
EXAMPLES = {
    'fake': [
        "BREAKING: Scientists discover that drinking coffee makes you immortal!",
        "ALERT: Government confirms aliens living in your backyard!",
        "SHOCKING: New study proves that the Earth is actually flat!",
        "URGENT: Your phone is secretly recording your thoughts!",
        "EXCLUSIVE: Time travel machine invented in garage!",
        "INCREDIBLE: Man grows wings after eating special fruit!",
        "MIRACLE: Fountain of youth discovered in local park!",
        "SCANDAL: Politician caught riding a unicorn to work!",
        "REVELATION: Moon landing was filmed in Hollywood!",
        "BREAKING: Dragons found living in city sewers!"
    ],
    'true': [
        "New study shows benefits of regular exercise on heart health",
        "Local community opens new public library",
        "Weather forecast predicts rain for the weekend",
        "City council approves new bike lanes",
        "Scientists discover new species of butterfly",
        "Local school wins regional science competition",
        "New public transportation schedule announced",
        "Community garden project receives funding",
        "Local restaurant wins culinary award",
        "New park opens in downtown area"
    ]
}

def create_model():
    """Cr√©e et entra√Æne un mod√®le simple avec les exemples"""
    # Pr√©paration des donn√©es
    texts = EXAMPLES['fake'] + EXAMPLES['true']
    labels = [1] * len(EXAMPLES['fake']) + [0] * len(EXAMPLES['true'])
    
    # Vectorisation
    vectorizer = TfidfVectorizer(max_features=1000)
    X = vectorizer.fit_transform(texts)
    
    # Entra√Ænement du mod√®le
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X, labels)
    
    return vectorizer, model

def get_model():
    """Charge ou cr√©e le mod√®le"""
    try:
        # Essayer de charger le mod√®le sauvegard√©
        model_data = joblib.load('fake_news_model.joblib')
        vectorizer = model_data['vectorizer']
        model = model_data['model']
        st.success("Mod√®le charg√© avec succ√®s !")
    except:
        # Si le mod√®le n'existe pas, en cr√©er un nouveau
        with st.spinner("Cr√©ation d'un nouveau mod√®le..."):
            vectorizer, model = create_model()
            # Sauvegarder le mod√®le
            model_data = {
                'vectorizer': vectorizer,
                'model': model
            }
            joblib.dump(model_data, 'fake_news_model.joblib')
            st.success("Nouveau mod√®le cr√©√© et sauvegard√© !")
    
    return vectorizer, model

try:
    # Charger ou cr√©er le mod√®le
    vectorizer, model = get_model()
    
    # Interface utilisateur
    st.header("üìù Analyser un article")
    
    # Formulaire de saisie
    with st.form("news_form"):
        title = st.text_input("Titre de l'article")
        text = st.text_area("Contenu de l'article")
        submitted = st.form_submit_button("Analyser")
    
    if submitted and text:
        with st.spinner("Analyse en cours..."):
            # Pr√©paration du texte
            input_text = f"{title} {text}" if title else text
            X = vectorizer.transform([input_text])
            
            # Pr√©diction
            prediction = model.predict(X)[0]
            probabilities = model.predict_proba(X)[0]
            confidence = probabilities[1] if prediction == 1 else probabilities[0]
            
            # Affichage des r√©sultats
            st.header("üìä R√©sultats de l'analyse")
            
            if prediction == 1:
                st.error("‚ö†Ô∏è FAKE NEWS D√âTECT√âE")
                st.metric(
                    "Probabilit√© que ce soit une fake news",
                    f"{confidence*100:.1f}%"
                )
            else:
                st.success("‚úÖ INFORMATION VRAIE")
                st.metric(
                    "Probabilit√© que ce soit une information vraie",
                    f"{confidence*100:.1f}%"
                )
            
            # Conseils
            st.info("üí° Conseils pour √©valuer la fiabilit√© d'un article :")
            st.markdown("""
            - **Source** : V√©rifiez la source de l'article et sa r√©putation
            - **V√©rification** : Recherchez des informations similaires sur d'autres sites fiables
            - **Sensationalisme** : M√©fiez-vous des titres exag√©r√©s ou trop sensationnels
            - **Date** : V√©rifiez la date de publication
            - **Sources cit√©es** : Examinez les citations et les sources mentionn√©es
            - **√âmotions** : M√©fiez-vous des articles qui cherchent √† provoquer des √©motions fortes
            - **V√©rification crois√©e** : Utilisez des sites de fact-checking reconnus
            """)
    
    # √Ä propos
    st.markdown("---")
    st.header("‚ÑπÔ∏è √Ä propos")
    st.write("""
    Cette application utilise un mod√®le de machine learning simple pour d√©tecter les fake news.
    Le mod√®le a √©t√© entra√Æn√© sur un ensemble d'exemples de vraies et fausses nouvelles.
    
    ‚ö†Ô∏è **Note importante** : Cette application est un outil d'aide √† la d√©cision. 
    Pour une analyse compl√®te, utilisez toujours votre jugement critique et v√©rifiez les sources.
    """)

except Exception as e:
    st.error(f"Une erreur est survenue : {str(e)}")
    st.info("Si le probl√®me persiste, essayez de red√©marrer l'application.")